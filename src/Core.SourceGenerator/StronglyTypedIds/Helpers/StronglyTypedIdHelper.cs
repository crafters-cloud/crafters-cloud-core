using System.Text;

namespace CraftersCloud.Core.SourceGenerator.StronglyTypedIds.Helpers;

public static class StronglyTypedIdHelper
{
    public static string GenerateClassSource(StronglyTypedIdToGenerate idToGenerate)
    {
        var nameSpace = idToGenerate.Namespace;
        var className = idToGenerate.ClassName;
        var valueKind = idToGenerate.ValueKind;
        var valueType = valueKind switch
        {
            0 => "Guid",
            1 => "Int32",
            _ => throw new InvalidOperationException($"Invalid value valueKind: {valueKind}")
        };
        var valueTypeFactory = valueKind == 0 ? "SequentialGuidGenerator.Generate()" : "default";

        StringBuilder source = new($$"""

                                     // <auto-generated />
                                     #pragma warning disable 1591

                                     using System;
                                     using CraftersCloud.Core.Entities;
                                     using CraftersCloud.Core.StronglyTypedIds;

                                     namespace {{nameSpace}};

                                     readonly partial record struct {{className}}({{valueType}} Value) : IStronglyTypedId<{{valueType}}>
                                     {
                                        public static implicit operator {{valueType}}({{className}} id) => id.Value;
                                     
                                        public override string ToString() => Value.ToString();
                                        
                                        public static {{className}} New() => new({{valueTypeFactory}});
                                        
                                        public static bool TryParse(string value, out {{className}} result)
                                        {
                                            if (!{{valueType}}.TryParse(value, out var val))
                                            {
                                                result = default;
                                                return false;
                                            }
                                         
                                             result = new {{className}}(val);
                                             return true;
                                         }
                                     }
                                     """);
        return source.ToString();
    }
}